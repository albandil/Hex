/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
 *                                                                           *
 *                       / /   / /    __    \ \  / /                         *
 *                      / /__ / /   / _ \    \ \/ /                          *
 *                     /  ___  /   | |/_/    / /\ \                          *
 *                    / /   / /    \_\      / /  \ \                         *
 *                                                                           *
 *                         Jakub Benda (c) 2013                              *
 *                     Charles University in Prague                          *
 *                                                                           *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef HEX_TWOEL_H
#define HEX_TWOEL_H

#include "potential.h"
#include "specf.h"

/**
 * Varphi function (multipole integral).
 */
class MultipoleIntegral : public RadialFunction<double>
{
public:
	
	MultipoleIntegral(
		int lambda,
		DistortingPotential u,
		RadialFunction<double> const * f1,
		RadialFunction<double> const * f2
 	);
	
	double getValue(double r) const;
	void toFile(const char* filenamebase) const;
	double eval(double x) const;
	
	mutable unsigned Evaluations;
	
private:
	
	void init();
	
	o2scl::interp_cspline<rArray> IIinf_interpolator, II0_interpolator, interpolator;
	
	DistortingPotential U;
	
	RadialFunction<double> const * F1;
	RadialFunction<double> const * F2;
    int Lambda;
    rArray II0_array;
    rArray IIinf_array;
    rArray II0_grid;
    rArray IIinf_grid;
	double S;
    rArray grid;
    rArray array;
	
	int IIinf_derivs(double x, size_t nv, const o2scl::ovector_base& y, o2scl::ovector_base& dydx);
	int II0_derivs(double x, size_t nv, const o2scl::ovector_base& y, o2scl::ovector_base& dydx);
};

/**
 * Varphi function (multipole integral).
 */
class MultipoleIntegralExc : public RadialFunction<double>
{
public:
	
	MultipoleIntegralExc(
		int lambda,
		DistortingPotential u,
		RadialFunction<double> const * f1,
		RadialFunction<double> const * f2
 	);
	
	double getValue(double r) const;
	void toFile(const char* filenamebase) const;
	double eval(double x) const;
	
	mutable unsigned Evaluations;
	
private:
	
	void init();
	
	rArray grid;
	rArray array;
	
	o2scl::interp_cspline<rArray> JJinf_interpolator, JJ0_interpolator, interpolator;
	
	DistortingPotential U;
	
	RadialFunction<double> const * F1;
	RadialFunction<double> const * F2;
    int Lambda;
	rArray JJ0_array;
    rArray JJinf_array;
    rArray JJ0_grid;
    rArray JJinf_grid;
	double Z;
	
	int JJinf_derivs(double x, size_t nv, const o2scl::ovector_base& y, o2scl::ovector_base& dydx);
	int JJ0_derivs(double x, size_t nv, const o2scl::ovector_base& y, o2scl::ovector_base& dydx);
};

#endif 
