/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
 *                                                                           *
 *                       / /   / /    __    \ \  / /                         *
 *                      / /__ / /   / _ \    \ \/ /                          *
 *                     /  ___  /   | |/_/    / /\ \                          *
 *                    / /   / /    \_\      / /  \ \                         *
 *                                                                           *
 *                         Jakub Benda (c) 2013                              *
 *                     Charles University in Prague                          *
 *                                                                           *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef HEX_PWBA_XGE
#define HEX_PWBA_XGE

// one r^a geom(bx) exp(-cx) term
typedef struct {
	double k;		// constant factor
	int a;			// power
	int gf;			// which goniometric function
	double b;		// goniometric function wave number
	double c;		// exponential factor
} xge_term;

#define GF_NONE	0
#define GF_SIN	1
#define GF_COS	2

// sum of several XGE terms
typedef std::vector<xge_term> xge_poly;

// product of two polynomials
xge_poly operator * (const xge_poly& P, const xge_poly& Q);

// Laguerre polynomial
xge_poly Laguerre(unsigned k, unsigned s);

// Hydrogen radial function normalization factor
double HydrogenN(unsigned n, unsigned l);

// Hydrogen radial function.
xge_poly HydrogenP(unsigned n, unsigned l);

// Riccati-Bessel function
xge_poly RiccatiBessel(int l, double k);

// integrals
xge_poly Integral_xge_inf(const xge_poly& P);
xge_poly Integral_xge_low(const xge_poly& P);
double Integral_xge_full(const xge_poly& P);

// evaluate the polynomial
double xge_eval(const xge_poly& P, double r);

// formatted output
void write_xge(const xge_poly& p);

#endif
